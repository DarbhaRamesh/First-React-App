{"version":3,"sources":["Components/Card.js","Components/Cardlist.js","Components/searchbox.js","Components/scroll.js","Components/ErrorBoundary.js","redux/actions.js","API/api.js","redux/constants.js","Containers/App.js","redux/reducer.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","requestRobots","dispatch","link","fetch","then","response","json","data","payload","catch","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","event","target","value","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d592988.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className= 'dib tc bg-light-green br3 pa3 ma2 grow dark-green'>\r\n            <img className=\"ba b--dark-green bw2 b--dotted\" alt = 'Robo' src = {`https://robohash.org/${id}?200*200`}/> \r\n            <div >\r\n                <h2> {name}</h2>\r\n                <p> {email} </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card","import React  from 'react';\r\nimport Card from './Card.js'\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map(user => {\r\n                return (<Card \r\n                    key = {user.id} \r\n                    id = {user.id} \r\n                    name= {user.name} \r\n                    email = {user.email}/>)\r\n            })\r\n        }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default CardList","import React  from \"react\";\r\n\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return(\r\n        <div className = 'ma2'>\r\n            <input \r\n            className = 'ba pa3 b--green bg-lightest-blue tc'\r\n            type=\"search\" \r\n            placeholder=\"Search Robot\"\r\n            onChange = { searchChange }\r\n            />\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default SearchBox\r\n","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style = {{overflowY : 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React ,{ Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError:true})\r\n    }\r\n    \r\n    render() {\r\n        if(this.state.hasError){\r\n            return <h2>Oooops!! Somethings Went Wrong!! Will fix it shortly</h2>\r\n        }\r\n        return this.props.children\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundary","import {apiCall} from '../API/api'\r\n\r\nimport { CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED } from './constants';\r\n\r\nexport const setSearchField = (text) =>({\r\n    type:CHANGE_SEARCH_FIELD,\r\n    payload:text\r\n})\r\n\r\n\r\n//redux thunk \r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n    apiCall('https://jsonplaceholder.typicode.com/users')\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload:error}))    \r\n}","export const apiCall = link => \r\n    fetch(link)\r\n    .then(response => response.json())","export const CHANGE_SEARCH_FIELD ='CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\n\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\n\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React ,{ Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nimport CardList from '../Components/Cardlist';\r\nimport SearchBox from '../Components/searchbox';\r\nimport Scroll from '../Components/scroll';\r\nimport ErrorBoundary from '../Components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nimport {setSearchField, requestRobots} from '../redux/actions';\r\n\r\nconst mapStateToProps = state =>{\r\n    return{\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    componentDidMount(){\r\n        this.props.onRequestRobots()\r\n    }\r\n\r\n    render(){\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n        const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n\r\n        return(\r\n        <div className = 'tc'>\r\n            <h1 className = 'f1'> ROBOFRIENDS</h1>\r\n            <h3 className = 'i f3'>My First React App</h3>\r\n            {\r\n                isPending ? <h1 className = 'tc'>LOADING ROBOTS...</h1> : \r\n                <div>\r\n                <SearchBox searchChange = { onSearchChange } />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots = { filteredRobots } />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            }\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED } from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField:''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state ,{searchField:action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error:''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nimport './index.css';\r\nimport App from './Containers/App';\r\nimport { searchRobots, requestRobots } from './redux/reducer'\r\nimport 'tachyons';\r\n\r\n\r\nconst logger = createLogger();\r\nconst rootReducer =  combineReducers({searchRobots, requestRobots})\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(<Provider store = {store}><App/></Provider>, document.getElementById('root'));\r\n"],"sourceRoot":""}